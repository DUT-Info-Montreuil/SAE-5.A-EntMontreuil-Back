# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestSAEStudent():
  def setup_method(self, method):
    self.driver = webdriver.Remote(command_executor='http://localhost:4444/wd/hub', desired_capabilities=DesiredCapabilities.CHROME)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_sAEStudent(self):
    # Test name: SAE-Student
    # Step # | name | target | value
    # 1 | open | /auth/login | 
    self.driver.get("http://localhost:4200/auth/login")
    # 2 | setWindowSize | 1185x688 | 
    self.driver.set_window_size(1185, 688)
    # 3 | click | id=username | 
    self.driver.find_element(By.ID, "username").click()
    # 4 | type | id=username | igada2
    self.driver.find_element(By.ID, "username").send_keys("igada2")
    # 5 | click | css=.p-password-input | 
    self.driver.find_element(By.CSS_SELECTOR, ".p-password-input").click()
    # 6 | type | css=.p-password-input | Test1234567!
    self.driver.find_element(By.CSS_SELECTOR, ".p-password-input").send_keys("Test1234567!")
    # 7 | mouseDown | css=.p-ripple | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".p-ripple")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    # 8 | mouseUp | css=.p-ink | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".p-ink")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    # 9 | click | css=.p-ripple | 
    self.driver.find_element(By.CSS_SELECTOR, ".p-ripple").click()
    # 10 | mouseOver | css=.p-ink | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".p-ink")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 11 | mouseOut | css=.p-ink | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 12 | mouseDown | css=li:nth-child(3) > .p-ripple > .font-medium | 
    element = self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(3) > .p-ripple > .font-medium")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    # 13 | mouseUp | css=.p-ink-active | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".p-ink-active")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    # 14 | click | linkText=Absences | 
    self.driver.find_element(By.LINK_TEXT, "Absences").click()
    # 15 | click | css=.p-inputswitch-slider | 
    self.driver.find_element(By.CSS_SELECTOR, ".p-inputswitch-slider").click()
    # 16 | click | css=.lg\3A block:nth-child(2) | 
    self.driver.find_element(By.CSS_SELECTOR, ".lg\\3A block:nth-child(2)").click()
    # 17 | click | id=reason | 
    self.driver.find_element(By.ID, "reason").click()
    # 18 | type | id=reason | Entretiens
    self.driver.find_element(By.ID, "reason").send_keys("Entretiens")
    # 19 | mouseDown | css=.p-button-primary .p-button-label | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".p-button-primary .p-button-label")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    # 20 | mouseUp | css=.p-ink-active | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".p-ink-active")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    # 21 | click | css=.p-button-primary > .p-ripple | 
    self.driver.find_element(By.CSS_SELECTOR, ".p-button-primary > .p-ripple").click()
    # 22 | click | css=.p-dialog-header-close | 
    self.driver.find_element(By.CSS_SELECTOR, ".p-dialog-header-close").click()
    # 23 | mouseDown | css=.m-3 | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".m-3")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    # 24 | mouseUp | css=.p-ink-active | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".p-ink-active")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    # 25 | click | css=.m-3 | 
    self.driver.find_element(By.CSS_SELECTOR, ".m-3").click()
    # 26 | mouseDown | css=.mt-auto li:nth-child(2) .font-medium | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".mt-auto li:nth-child(2) .font-medium")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).click_and_hold().perform()
    # 27 | mouseUp | css=.p-ink-active | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".p-ink-active")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).release().perform()
    # 28 | click | linkText=Se déconnecter | 
    self.driver.find_element(By.LINK_TEXT, "Se déconnecter").click()
    # 29 | close |  | 
    self.driver.close()
  
